# vim: set filetype=gitconfig : ~
# vim: set shiftwidth=4 : ~
# vim: set softtabstop=0 : ~
# vim: set noexpandtab : ~

[alias]

	# ============= [ ADD_______________________ ] =============
	ad = add
	af = add -f
	ap = add -p
	ah = add .



	# ============= [ BLAME_____________________ ] =============
	# http://goo.gl/4yyu5v
	bl = blame HEAD



	# ============= [ BRANCH____________________ ] =============
	ba = branch -a
	# show amount of commits in branch
	bc = "!f() { git rev-list --count HEAD ^${1-master}; }; f"
	bd = branch -D
	be = branch -m
	bm = branch --merged
	# show name of the active branch
	bn = rev-parse --abbrev-ref HEAD
	br = branch
	bt = branch -r
	bu = branch --no-merged
	# deleting branches that have been already merged
	bv = branch -vv
	bw = "!f() { git branch --merged | grep -v master | xargs git branch -d; git remote prune origin; }; f"



	# ============= [ CHECKOUT__________________ ] =============
	cb = checkout -b
	co = checkout
	cp = checkout -



	# ============= [ CLONE_____________________ ] =============
	cl = clone



	# ============= [ COMMIT____________________ ] =============
	ca = commit -am WIP
	ce = commit --only -v
	cf = "!f() { git add -u && git commit --amend -C HEAD; }; f"
	ci = commit -v
	cm = commit --amend
	cq = "!f() { git commit ./$GIT_PREFIX/$1 -m $1; }; f"
	cs = "!f() { git add -u && git commit --amend -c HEAD; }; f"
	cu = commit --amend --reset-author



	# ============= [ DIFF______________________ ] =============
	di = diff
	dc = diff --cached
	dh = diff --shortstat
	dn = diff --numstat
	ds = diff --stat --find-copies
	dt = difftool



	# ============= [ LOG_______________________ ] =============

	# 'b' letter but 'log' command; shows log in current branch only
	bo = "!f() { git log --no-merges ${1-master}..; }; f"

	l1 = log -n 1
	lg = log -p
	ln = log --name-only
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lv = log --name-status
	#hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	#lol = log --graph --decorate --pretty=oneline --abbrev-commit
	#lola = log --graph --decorate --pretty=oneline --abbrev-commit --all



	# ============= [ PULL______________________ ] =============
	pl = pull --ff-only



	# ============= [ PUSH______________________ ] =============
	# http://stackoverflow.com/a/19021888/1344249
	# https://www.linux.org.ru/forum/development/11666986
	ph = ![ -z $(git config "branch.$(git rev-parse --abbrev-ref HEAD).merge") ] && git push -u "$@" || git push "$@"
	px = push --no-verify
	pf = push --force



	# ============= [ REBASE____________________ ] =============
	rb = "!f() { git rebase -i HEAD~${1-1}; }; f"
	rc = rebase --continue
	ra = rebase --abort



	# ============= [ REMOTE____________________ ] =============
	mp = remote prune origin



	# ============= [ RESET_____________________ ] =============
	rh = "!f() { git reset --hard HEAD~${1-1}; }; f"
	rs = "!f() { git reset --soft HEAD~${1-1}; }; f"
	rt = reset HEAD



	# ============= [ STASH_____________________ ] =============
	sh = stash
	sc = stash clear
	sl = stash list
	sp = stash pop
	ss = stash show -p
	si = stash -p



	# ============= [ STATUS____________________ ] =============
	st = status -sb



	# ============= [ TAG_______________________ ] =============
	tr = tag -l
	tl = git describe --tags --abbrev=0
	td = "!f() { git tag -d $1; }; f"
	tv = show-ref --tags --abbrev
	tr = ls-remote --tags origin



	# ============= [ SUBMODULE_________________ ] =============
	mu = submodule update --recursive
	mi = submodule update --init --recursive



	# ============= [ __________________________ ] =============
	os = shortlog -s
	#ls = ls-files
	in = git fetch && git log ..origin/master
	out = git fetch && git log origin/master..
	#sd = show --format="%ci"
	ft = cat-file -t
	#cat = cat-file -p
	# squash current commit with first, continue rebase
	sfc = !git rs && git ca && git ec

	# git grep through all history
	gr = "!f() { git rev-list --all | xargs git grep -F \"$1\"; }; f"

	la = config --get-regexp alias
	vc = config --global -e

	webui = !/home/vasyl/.git-webui/release/libexec/git-core/git-webui --port 4321

	sd = show --format="%ci"
	fup = log --since '1 day ago' --oneline "--author=$(git config --get user.email)"
	#freq = !history | grep git | cut -c 8- | sort | uniq -c | sort -n -r | head -n 5

