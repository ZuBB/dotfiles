# vim: set filetype=gitconfig : ~
# vim: set shiftwidth=4 : ~
# vim: set softtabstop=0 : ~
# vim: set noexpandtab : ~

[alias]

	# ============= [ ADD_______________________ ] =============
	ad = add
	af = add -f
	ap = add -p
	ah = add .



	# ============= [ BLAME_____________________ ] =============
	# http://goo.gl/4yyu5v
	bl = blame HEAD



	# ============= [ BRANCH____________________ ] =============
	ba = branch -a
	# show amount of commits in branch
	bc = "!f() { git rev-list --count HEAD ^${1-`git bp`}; }; f"
	bd = branch -D
	be = branch --move
	bm = branch --merged
	# show name of the active branch
	bn = rev-parse --abbrev-ref HEAD
	# get parent branch of the current branch (still not reliable)
	# http://stackoverflow.com/questions/3161204/
	# https://gist.github.com/joechrysler/6073741
	bp = "!f() { git show-branch | grep '*' | grep -v \"`git bn`\" | \
		head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[a\\^~].*//' ; \
		}; f"
	br = branch
	bt = branch -r
	bu = branch --no-merged
	bv = branch -vv
	# deleting branches that have been already merged
	bwO = "!f() { \
		git bm | grep -Ev \"(master|develop)\" | grep -v '\\*' \
		| xargs -r git branch -d; git mp > /dev/null 2>&1; \
		}; f"
	bw = "!f() { \
		CB=`git bn`; \
		BRANCHES=`git br | grep -Ev \"(master|develop)\" | grep -v '\\*' | xargs`; \
		for br in $BRANCHES \
		do \
		    BR_TEST=\"$br-merge-test-branch\"; \
		    git co -qb \"$BR_TEST\"; \
		    git merge --squash \"$br\" 2>&1; \
		    BR_ST=`git status --porcelain`; \
			git co -q \"$CB\"; \
			[[ ! -n $BR_ST ]] && git bd \"$br\"; \
			git bd  \"$BR_TEST\"; \
	    done; \
		git mp; \
		}; f"



	# ============= [ CHECKOUT__________________ ] =============
	cb = checkout -b
	co = checkout
	cr = checkout -



	# ============= [ CHERRY-PICK_______________ ] =============
	cp = cherry-pick



	# ============= [ CLONE_____________________ ] =============
	cl = clone



	# ============= [ COMMIT____________________ ] =============
	ca = commit -am WIP
	ce = commit --only -v
	cf = "!f() { git add -u && git commit --amend -c HEAD; }; f"
	ci = commit -v
	cm = commit --amend
	cq = "!f() { git commit ./$GIT_PREFIX/$1 -m $1; }; f"
	cs = "!f() { git add -u && git commit --amend -C HEAD; }; f"
	cu = commit --amend --reset-author



	# ============= [ CONFIG____________________ ] =============
	la = config --get-regexp alias
	ec = config --global -e



	# ============= [ DIFF______________________ ] =============
	# checks if there are any changes;
	da = "!f() { test -z $(git ls-files -m) ; }; f"

	dc = diff --cached
	di = diff
	dn = "!f() { git da && p= || p=\"HEAD~${1-`git bc`}\" ; git diff --numstat $p ; }; f"
	dq = "!f() { git da && p= || p=\"HEAD~${1-`git bc`}\" ; git diff --shortstat $p ; }; f"
	ds = "!f() { git da && p= || p=\"HEAD~${1-`git bc`}\" ; git diff --stat --find-copies $p ; }; f"
	dt = difftool



	# ============= [ LOG_______________________ ] =============

	# 'b' letter but 'log' command; shows log in current branch only
	bo = "!f() { git log --no-merges ${1-`git bp`}..; }; f"

	l1 = log --decorate --stat -n 1
	lg = log -p
	ln = log --name-only
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]\\ [%ad]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lv = "!f() { git log --decorate --stat -${1}; }; f"
	#hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	#lol = log --graph --decorate --pretty=oneline --abbrev-commit
	#lola = log --graph --decorate --pretty=oneline --abbrev-commit --all



	# ============= [ PULL______________________ ] =============
	pl = pull --ff-only



	# ============= [ PUSH______________________ ] =============
	# TODO replace `origin` with dynamic param
	pd = "!f() { git push origin --delete $1; }; f"
	pf = push --force
	# http://stackoverflow.com/a/19021888/1344249
	# https://www.linux.org.ru/forum/development/11666986
	ph = ![ -z $(git config "branch.$(git bn).merge") ] && git push -u "$@" || git push "$@"
	px = push --no-verify



	# ============= [ REBASE____________________ ] =============
	ra = rebase --abort
	# if passed string is a number - do rebase by commits number
	# TODO need to make sure passed number is not a commit hash
	rb = "!f() { test ! -z \"${1##*[!0-9]*}\" \
		&& git rebase -i HEAD~$1 \
		|| git rebase $1; }; f"
	rc = rebase --continue
	rk = rebase --skip



	# ============= [ REMOTE____________________ ] =============
	mp = remote prune origin



	# ============= [ RESET_____________________ ] =============
	rh = "!f() { git reset --hard HEAD~${1-1}; }; f"
	rs = "!f() { git reset --soft HEAD~${1-1}; }; f"
	rd = "!f() { test -z $1 && git reset HEAD || git reset HEAD $1; }; f"



	# ============= [ STASH_____________________ ] =============
	sh = stash
	sc = stash clear
	sl = stash list
	sp = stash pop
	ss = stash show -p
	si = stash -p



	# ============= [ STATUS____________________ ] =============
	st = status
	ss = status -sb



	# ============= [ TAG_______________________ ] =============
	tr = tag -l
	tl = git describe --tags --abbrev=0
	td = "!f() { git tag -d $1; }; f"
	tv = show-ref --tags --abbrev
	tr = ls-remote --tags origin



	# ============= [ SUBMODULE_________________ ] =============
	mu = submodule update --recursive
	mi = submodule update --init --recursive



	# ============= [ __________________________ ] =============
	os = shortlog -s
	#ls = ls-files
	in = git fetch && git log ..origin/master
	out = git fetch && git log origin/master..
	#sd = show --format="%ci"
	ft = cat-file -t
	#cat = cat-file -p
	# squash current commit with first, continue rebase
	s1 = !git rs && git ca && git ec

	# git grep through all history
	gr = "!f() { git rev-list --all | xargs git grep -F \"$1\"; }; f"

	webui = !/home/$USER/.local/git-webui/release/libexec/git-core/git-webui --port 4321

	sd = show --format="%ci"
	fup = log --since '1 day ago' --oneline "--author=$(git config --get user.email)"
	#freq = !history | grep git | cut -c 8- | sort | uniq -c | sort -n -r | head -n 5

