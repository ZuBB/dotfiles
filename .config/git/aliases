# vim: set filetype=gitconfig : ~
# vim: set shiftwidth=4 : ~
# vim: set softtabstop=0 : ~
# vim: set noexpandtab : ~

[alias]

	# ============= [ ADD_______________________ ] =============
	ad = add
	af = add -f
	ap = add -p
	ah = add .



	# ============= [ BLAME_____________________ ] =============
	# http://goo.gl/4yyu5v
	bl = blame HEAD



	# ============= [ BRANCH____________________ ] =============
	ba = branch -a
	# show amount of commits in branch
	bc = "!f() { git rev-list --count HEAD ^${1-`git bp`}; }; f"
	bd = branch -D
	bm = branch --move
	# show name of the active branch
	bn = rev-parse --abbrev-ref HEAD
	# get parent branch of the current branch (still not reliable)
	# http://stackoverflow.com/questions/3161204/
	# https://gist.github.com/joechrysler/6073741
	bp = "!f() { git show-branch | grep '*' | grep -v \"`git bn`\" | \
		head -n1 | sed 's/.*\\[\\(.*\\)\\].*/\\1/' | sed 's/[a\\^~].*//' ; \
		}; f"
	br = branch
	bt = branch -r
	bu = branch --unset-upstream
	bv = branch -vv



	# ============= [ CHECKOUT__________________ ] =============
	cb = checkout -b
	co = checkout
	cr = checkout -
	cd = checkout develop



	# ============= [ CHERRY-PICK_______________ ] =============
	cp = cherry-pick



	# ============= [ CLONE_____________________ ] =============
	cl = clone



	# ============= [ COMMIT____________________ ] =============
	ca = commit -am WIP
	ce = commit --allow-empty
	cf = commit --all --amend -c HEAD
	ch = commit -m WIP
	ci = commit
	cm = commit --amend
	cq = "!f() { git add ./$GIT_PREFIX/$1 && git commit ./$GIT_PREFIX/$1 -m \"WIP: $1\"; }; f"
	cs = commit --all --amend -C HEAD
	ct = commit --amend --date=now
	cu = commit --amend --reset-author
	cx = "!f() { git commit --only ${1-.}; }; f"



	# ============= [ CONFIG____________________ ] =============
	la = !git config -l | grep alias | cut -c 7-
	ga = "!f() { git config -l | grep alias | cut -c 7- | grep \"^$1=\" ; }; f"
	ec = config --global -e



	# ============= [ DIFF______________________ ] =============
	# checks if there are any changes;
	d1 = diff HEAD^
	da = "!f() { test -n \"$(git ls-files -m)\"; }; f"
	dc = diff --cached
	di = diff
	dn = "!f() { git da && p= || p=\"HEAD~${1-`git bc`}\" ; git diff --numstat $p ; }; f"
	dq = "!f() { git da && p= || p=\"HEAD~${1-`git bc`}\" ; git diff --shortstat $p ; }; f"
	ds = "!f() { git da && p= || p=\"HEAD~${1-`git bc`}\" ; git diff --stat --find-copies $p ; }; f"
	dt = difftool



	# ============= [ INIT______________________ ] =============
	it = "!f() { git init && git commit -m \"empty root\" --allow-empty; }; f"



	# ============= [ LOG_______________________ ] =============

	# 'b' letter but 'log' command; shows log in current branch only
	bo = "!f() { git log --no-merges ${1-`git bp`}..; }; f"

	l1 = log -n 1
	lf = "!f() { git l1 --decorate --stat; }; f"
	lg = log -p
	ln = log --name-only
	ls = log --pretty=format:"%C(yellow)%h\\ %Cgreen%ad%Cred%d\\ %Creset%s\\ %Cblue[%aN]" --decorate --date=short
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lv = "!f() { git log --decorate --stat -${1}; }; f"
	#hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	#lol = log --graph --decorate --pretty=oneline --abbrev-commit
	#lola = log --graph --decorate --pretty=oneline --abbrev-commit --all



	# ============= [ MERGETOOL__________________] =============
	mt = mergetool



	# ============= [ PULL______________________ ] =============
	pl = pull --ff-only



	# ============= [ PUSH______________________ ] =============
	# TODO replace `origin` with dynamic param
	pd = "!f() { git push origin --delete $1; }; f"
	pf = push --force
	# http://stackoverflow.com/a/19021888/1344249
	# https://www.linux.org.ru/forum/development/11666986
	ph = ![ -z $(git config "branch.$(git bn).merge") ] && git push -u "$@" || git push "$@"
	px = push --no-verify



	# ============= [ REBASE____________________ ] =============
	ra = rebase --abort
	# if passed string is a number - do rebase by commits number
	# TODO need to make sure passed number is not a commit hash
	rb = "!f() { git rev-parse -q --verify $1 \
		&& git rebase $1 \
		|| git rebase -i HEAD~$1; }; f"
	rc = rebase --continue
	rk = rebase --skip



	# ============= [ REMOTE____________________ ] =============
	mp = remote prune origin



	# ============= [ REMOVE ] =============
	rk = rm --cached



	# ============= [ RESET_____________________ ] =============
	rh = "!f() { git reset --hard HEAD~${1-1}; }; f"
	rs = "!f() { git reset --soft HEAD~${1-1}; }; f"
	rt = "!f() { test -z $1 && git reset HEAD || git reset HEAD $1; }; f"



	# ============= [ STASH_____________________ ] =============
	sh = stash
	sl = stash list
	sp = stash pop
	ss = stash show -p
	si = stash -p
	sd = "!f() { git stash drop stash@{$1}; }; f"



	# ============= [ STATUS____________________ ] =============
	sr = status
	st = status --short --branch
	sa = status --untracked-files=no



	# ============= [ TAG_______________________ ] =============
	tr = tag -l
	tl = git describe --tags --abbrev=0
	td = "!f() { git tag -d $1; }; f"
	tv = show-ref --tags --abbrev
	tr = ls-remote --tags origin
	tw = "!f() { git tag -d $1 && git push origin :refs/tags/$1; }; f"



	# ============= [ SUBMODULE_________________ ] =============
	mu = submodule update --recursive
	mi = submodule update --init --recursive



	# ============= [ __________________________ ] =============
	os = shortlog --summary --numbered
	#ls = ls-files
	ft = cat-file -t
	#cat = cat-file -p
	# squash current commit with first, continue rebase
	s1 = !git rs && git ca && git ec

	# git grep through all history
	gr = "!f() { git rev-list --all | xargs git grep -F \"$1\"; }; f"

	#sd = show --format="%ci"
	fup = log --since '1 day ago' --oneline "--author=$(git config --get user.email)"
	#freq = !history | grep git | cut -c 8- | sort | uniq -c | sort -n -r | head -n 5
	
	as = !git ls-files | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' | sort -f | uniq -ic | sort -nr
    or = [ ! -z `git rev-parse --show-cdup` ] && cd `git rev-parse --show-cdup || pwd`
