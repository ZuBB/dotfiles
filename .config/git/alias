# vim: set filetype=gitconfig : ~
# vim: set shiftwidth=4 : ~
# vim: set softtabstop=0 : ~
# vim: set noexpandtab : ~

[alias]

	# ============= [ BLAME_____________________ ] =============
	# http://goo.gl/4yyu5v
	bl = blame HEAD



	# ============= [ BRANCH____________________ ] =============
	ba = branch -a
	bc = rev-list --count HEAD ^master
	# show amount of commits in branch
	bd = branch -D
	be = branch -m
	bm = branch --merged
	# show name of the active branch
	bn = rev-parse --abbrev-ref HEAD
	# 'b' letter but 'log' command
	# shows log in current branch only
	bo = "!f() { git log --no-merges ${1-master}.. }; f"
	br = branch
	bt = branch -r
	bu = branch --no-merged
	# deleting branches that have been already merged
	bw = "!f() { git branch --merged | xargs git branch -d }; f"



	# ========== [ CHECKOUT ] ==========
	# 
	co = checkout
	cb = checkout -b

	# ========== [ CLONE ] ==========
	cl = clone

	# ========== [ COMMIT ] ==========
	ci = commit
	cm = commit --amend
	cu = commit --amend --reset-author
	cq = "!f() { git commit ./$GIT_PREFIX/$1 -m $1; }; f"
	cs = commit -m WIP
	ca = commit -am WIP

	# ========== [ DIFF ] ==========
	di = diff
	dt = difftool
	dc = diff --cached
	ds = diff --stat --find-copies
	dn = diff --numstat
	dh = diff --shortstat

	# ========== [ LOG ] ==========
	l1 = log -n 1
	lg = log -p
	ln = log --name-only
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lv = log --name-status
	#hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	#lol = log --graph --decorate --pretty=oneline --abbrev-commit
	#lola = log --graph --decorate --pretty=oneline --abbrev-commit --all

	# ========== [ PULL ] ==========
	pl = pull --ff-only

	# ========== [ PUSH ] ==========
	# http://stackoverflow.com/a/19021888/1344249
	# https://www.linux.org.ru/forum/development/11666986
	ph = "!f() { [ -z $(git config \"branch.$(git rev-parse --abbrev-ref HEAD).merge\") ] && git push -u \"$@\"|| git push \"$@\"; }; f"
	pd = push --no-verify
	pf = push --force

	# ========== [ STASH ] ==========
	sh = stash
	sc = stash clear
	sl = stash list
	sp = stash pop
	ss = stash show -p
	si = stash -p

	# ========== [ STATUS ] ==========
	st = status

	mu = submodule update --recursive
	mi = submodule update --init --recursive

	ei = "!f() { git rebase -i HEAD~$1; }; f"
	ec = rebase --continue
	ea = rebase --abort

	rs = reset --soft HEAD~1
	rh = reset HEAD

	tr = tag -l
	tl = git describe --tags --abbrev=0
	td = "!f() { git tag -d $1; }; f"
	tv = show-ref --tags --abbrev
	tr = ls-remote --tags origin

	os = shortlog -s
	#ls = ls-files
	in = git fetch && git log ..origin/master
	out = git fetch && git log origin/master..
	#sd = show --format="%ci"
	ft = cat-file -t
	#cat = cat-file -p
	# squash current commit with first, continue rebase
	sfc = !git rs && git ca && git ec

	# git grep through all history
	gr = "!f() { git rev-list --all | xargs git grep -F \"$1\"; }; f"

	la = config --get-regexp alias
	vc = config --global -e

	webui = !/home/vasyl/.git-webui/release/libexec/git-core/git-webui --port 4321

	sd = show --format="%ci"
